/*
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.14.1/userguide/tutorial_java_projects.html
 */
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.4.1.RELEASE")
    }
}

// Apply the java, eclipse and SpringBoot plugins to add support for Java, eclipse and SpringBoot 
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'

// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
}

task genJaxb {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.classesDir = "${buildDir}/classes/jaxb"
    ext.schema = "src/main/resources/xsd/Users.xsd"

    outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            xjc(destdir: sourcesDir, schema: schema) {
                arg(value: "-wsdl")
                produces(dir: sourcesDir, includes: "**/*.java")
            }

            javac(destdir: classesDir, source: 1.6, target: 1.6, debug: true,
                    debugLevel: "lines,vars,source",
                    classpath: configurations.jaxb.asPath) {
                src(path: sourcesDir)
                include(name: "**/*.java")
                include(name: "*.java")
            }

            copy(todir: classesDir) {
                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: "**/*.java")
                }
            }
        }
    }
}

task afterEclipseImport {
	dependsOn "genJaxb"
}

// tag::jaxb[]
configurations {
    jaxb
}

jar {
    baseName = 'spring4-rest-crud-operations'
    version =  '0.1.0'
   	from genJaxb.classesDir
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

// In this section you declare the dependencies for your production and test code
dependencies {
	compile("org.springframework.boot:spring-boot-starter-web-services")
	compile("org.springframework.boot:spring-boot-starter-web")
	compile("org.springframework:spring-tx")
	compile("org.apache.commons:commons-lang3:3.4")
	
	//Spring OAuth2
	compile("org.springframework.security.oauth:spring-security-oauth2:2.0.11.RELEASE")
	compile("org.springframework.security:spring-security-jwt:1.0.5.RELEASE")
	
	//This is Swagger generator
	compile "io.springfox:springfox-swagger2:2.5.0"
    compile 'io.springfox:springfox-swagger-ui:2.5.0'

	//This is for WSDL generator
	compile("wsdl4j:wsdl4j:1.6.1")

	//This is the WADL generator
    compile("org.jvnet.ws.wadl:wadl-core:1.1.6") {
        exclude group: "junit"
    }
    compile("org.jvnet.ws.wadl:wadl-client-plugin:1.1.6") {
        exclude group: "junit"
    }
    
    // https://mvnrepository.com/artifact/commons-collections/commons-collections
	compile group: 'commons-collections', name: 'commons-collections', version: '3.2.2'
    
    jaxb("com.sun.xml.bind:jaxb-xjc:2.2.4-1")
    compile(files(genJaxb.classesDir).builtBy(genJaxb))
    
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('com.jayway.jsonpath:json-path')

    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}

